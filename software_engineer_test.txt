Basic Rules
===========
1. Review the questions in this file. Reply back via email with an estimated
   delivery date.
2. Answer each of the questions below.
3. Add your answer to each question to this file, in-line.
4. Send the final file back for review.
5. Bonus points if you add this initial file to your public git repo and share
   that repo with us so we can see how your answers progressed.
6. You may use external sources to help answer the questions (i.e. Google, etc),
   but you should always cite your sources in your comments. Learning from
   others is good. Plagiarism is bad.


Developer Test
==============

1.  What editor will you use to edit this file, and why?
    I'll use the browser for Github.  These are relatively simple questions, so no need for the typeahead features of complex browsers.
    
2.  Some of the questions will ask for a solution in the language of
    your choice.  What language(s) will you choose, and why?
    I'll use Python and .Net.  Python is my preferred language for simple scripting tasks.  I've used .Net for over 10 years in my current job.
    
3.  Explain the difference between testing and debugging.
   Testing is when you have expected behavior and running the application either manually or through automation, to ensure that the application behaves the way it is expected to.  Debugging is what you do if you find that the application is not behaving as expected and you are trying to figure out the root cause.

4.  Consider a user querying a search engine.  Describe, in as much
    detail as you like, what happens between the user clicking the
    "submit" button and the display of the results.
    The web form submits the input from the user to a frontend web server.  Depending on the setup, that server then hands off the request to a search cluster which will do a variety of things depending on how advanced it is.  If the cluster is pretty advanced, then it will lemmatize the words and phrases, run some type of semantic algorithm to detect and correct misspellings, parse the query into concepts rather than purely keywords, and then augment the query with common synonyms of the words.  Once it has the best augmented query it can craft, the search engine will then look up the words and phrases in an inverted index to find the documents that actually match the query.  If the engine is advanced, it will likely do a two-step ranking process.  The first step in ranking will be a highly performant ranking algorithm such as TF/IDF.  The engine will over sample from this first step so that it could then a run a second pass algorithm likely trained through machine learning techniques to get the final ranking.
    
      The results will then be sent back to the user but not before all the relevant data has been logged for later review and possibly to be used in the training of even better learning algorithms.

The two tables below describe relationships between employees,
managers, and departments (the columns employee.mgr_id and
department.head both refer to employee.id).  Use these definitions to
answer questions 5-10.  If you need to use any nonstandard functions or
syntax, be sure to name the DBMS that implements them.

employee                              department
----------------------------------    -----------------------
 id |        name        | mgr_id           name      | head
----+--------------------+--------    ----------------+------
  1 | Jonathan Archer    |     11      Operations     |   11
  2 | Christopher Pike   |     12      Marketing      |   12
  3 | James Kirk         |     13      IT             |   13
  4 | Jean-Luc Picard    |     14      HR             |   14
  5 | Kathryn Janeway    |     15      Sales          |   15
  6 | Ralph Wiggum       |     11
  7 | Troy McClure       |     12
  8 | Waylon Smithers    |     17
  9 | Edna Krabappel     |     16
 10 | Ned Flanders       |     15
 11 | Buffy Summers      |
 12 | Xander Harris      |
 13 | Willow Rosenberg   |
 14 | Rupert Giles       |
 15 | Oz Selbie          |
 16 | Dade Murphy        |     11
 17 | Kate Libby         |     13
 18 | Paul Cook          |     17
 19 | Emmanuel Goldstein |     16
 20 | Winston Smith      |     15
 21 | Thomas Anderson    |     15
 22 | Agent Smith        |     14
 23 | Malcolm Reynolds   |     14
 24 | River Tam          |     18
 25 | Jason Nesmith      |     18

5.  Write an SQL query to list the full name of every employee,
    alphabetized by first name.
    Select name from employee order by name
    
6.  Write an SQL query to list the full name of every employee,
    alphabetized by last name.
    Select name from employee order by right(len(name) - charindex(' ', name))
    
7.  Write an SQL query to list the full name of every employee along
    with the full name of his/her manager.
    Select t1.name as employee_name, t2.name as manager_name from employee as t1
    left outer join employee as t2
    on t1.mgr_id = t2.id
    
8.  Write an SQL query to list the full name of every employee in the
    Sales department.
    Select name from employee where mgr_id = 15
    
    *NOTE:  This only works because the sales department only has one level.  As discussed below, this table is structured poorly.
    
9.  Write an SQL query to list the full name of every employee along
    with name of his/her department.
    This query, while possible to write with the current structure, is a clear indicator of a need to refactor the table.
    
    
10. Is there a better design for a database that supports the queries
    described in questions 5-9?  If so, describe it.  If not, why not?
    Yes.
    
    Employee:
    ID
    First_Name
    Last_Name
    Dpmt_ID
    Mgr_ID
    
    Department:
    ID
    Name
    Dpmt_Head
    
11. Write a function in the language of your choice that implements
    quicksort on an array of integers.
    # https://en.wikipedia.org/wiki/Quicksort
    
    def quicksort(arr, low, high):
      if low < high:
         p = partition(arr, low, high)
         quicksort(p, low, p-1)
         quicksort(p, p+1, high)
         
   def partition(arr, low, high):
      pivot = arr[high]
      i = low
      for j in range(low, high-1):
         if arr[j] <= pivot:
            tmp = arr[i]
            arr[i] = arr[j]
            arr[j] = tmp
            i += 1
      tmp = arr[i]
      arr[i] = arr[high]
      arr[high] = tmp
      return i
    
12. Write a function in the language of your choice that performs
    binary search on a sorted array of integers.
    #https://en.wikipedia.org/wiki/Binary_search_algorithm
    def binary_search(arr, target)
      return binary_search_worker(arr, target, 0, len(arr) - 1)
            
   def binary_search_worker(arr, target, start, end):
      if start == end:
         if arr[start] == target:
            return = start
         else:
            return null
      else:
         midpoint = Math.floor(float(end - start) / 2)
         if arr[midpoint] == target:
            return midpoint
         else:
            if midpoint > target:
               return binary_search_worker(arr, target, start, midpoint - 1)
            else
               return binary_search_worker(arr, target, midpoint + 1, end)
      
      
13. Write a function in the language of your choice performs the query
    you wrote for question 7, and outputs the results as an HTML table.
    import pyodbc
    
    def get_employees_and_managers():
      html = "<table>"
      con = pyodbc.connect('CONNECTION_STRING')
		cur = con.cursor()
		row = cur.execute("Select t1.name as employee_name, t2.name as manager_name from employee as t1 left outer join employee as t2 on t1.mgr_id = t2.id").fetchone()
		
		while row is not null:
		   html += "<tr><td>" + row.employee_name + "</td><td>" + row.manager_name + "</td></tr>"
		  
		html += "</table>"
		
		return html
		
	Doing string manipulation to generate mark up makes me cringe.  A better language for this task would be something like Ng.
			
    
14. Write a program in the language of your choice that takes a filename
    and a number N as arguments and retrieves and outputs the Nth line
    from the file.
    
    # I would just use grep if I was doing this in the console
    import sys
    
    filename = sys.argv[1]
    n = sys.argv[2]
    
    cur_line_num = 0
    line_found = False
    for l in open(filename).readlines():
      if cur_line_num == n:
         print(l)
         line_found = True
         break
      cur_line_num += 1
    if !line_found:
      print("Line not found")
    
15. Write the function from question 12 in a different language.
16. Write the program from question 14 in a different language (it can
    be the same language you used for #15, but it doesn't have to be).
